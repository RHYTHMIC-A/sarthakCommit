"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var Handlers_1 = require("./Handlers");
var RequestType;
(function (RequestType) {
    RequestType["GET"] = "GET";
    RequestType["PATCH"] = "PATCH";
    RequestType["POST"] = "POST";
})(RequestType = exports.RequestType || (exports.RequestType = {}));
var Router = /** @class */ (function () {
    function Router(routes) {
        var _this = this;
        this.router = express.Router();
        var parsed = arguments.length === 1
            ? routes
            : Router.mergeRoutes(Array.from(arguments));
        parsed.forEach(function (route) {
            switch (route.type) {
                case RequestType.GET:
                    _this.router.get(route.path, Handlers_1.steps(route.steps));
                    break;
                case RequestType.PATCH:
                    _this.router.patch(route.path, Handlers_1.steps(route.steps));
                    break;
                case RequestType.POST:
                    _this.router.post(route.path, Handlers_1.steps(route.steps));
                    break;
                default:
                    break;
            }
        });
    }
    Router.createRoutes = function (type, pre) {
        return pre.map(function (route) {
            return __assign({}, route, { type: type });
        });
    };
    Router.mergeRoutes = function (routes) {
        var _a;
        return (_a = []).concat.apply(_a, routes);
    };
    Object.defineProperty(Router.prototype, "routes", {
        get: function () {
            return this.router;
        },
        enumerable: true,
        configurable: true
    });
    return Router;
}());
exports.Router = Router;

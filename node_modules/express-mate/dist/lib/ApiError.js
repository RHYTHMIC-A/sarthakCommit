"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var HTTPStatus = require("http-status");
var winston = require("winston");
var ApiError = /** @class */ (function () {
    function ApiError(res) {
        this.message = undefined;
        this.data = undefined;
        this.res = res;
        this.sterilized = { message: this.message, data: this.data };
        this.sterilizeArg(arguments[1]);
        this.init({ message: 'There was an unknown error on the server.' });
    }
    ApiError.respond = function (res, data) {
        if (data instanceof Error) {
            res.status(this.code).json({
                status: this.status,
                message: data.message,
                data: data
            });
        }
        else if (typeof data === 'string') {
            res.status(this.code).json({
                status: this.status,
                message: data
            });
        }
        else {
            res.status(this.code).json({
                status: this.status,
                data: data
            });
        }
    };
    ApiError.prototype.sterilizeArg = function (arg) {
        if (arg instanceof Error) {
            this.sterilized = __assign({}, this.sterilized, { data: arg, message: arg.message });
        }
        else if (typeof arg === 'string') {
            this.sterilized = __assign({}, this.sterilized, { message: arg });
        }
        else if (arg) {
            this.sterilized = __assign({}, this.sterilized, { data: arg });
        }
    };
    ApiError.prototype.init = function (defaults) {
        var _a = this.sterilized, data = _a.data, message = _a.message;
        this.data = data ? data : defaults.data;
        this.message = message ? message : defaults.message;
    };
    ApiError.prototype.end = function () {
        if (!this.res.headersSent) {
            var code = this.constructor.code;
            var status = this.constructor.status;
            this.res.status(code).json({
                status: status,
                message: this.message,
                data: this.data
            });
        }
    };
    ApiError.prototype.print = function () {
        if (this.message) {
            winston.error(JSON.stringify(this.message));
        }
    };
    ApiError.status = 'error';
    ApiError.code = HTTPStatus.INTERNAL_SERVER_ERROR;
    return ApiError;
}());
exports.ApiError = ApiError;
